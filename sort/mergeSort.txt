private void sort (int[] nums) {
	mergeSort(nums, 0, nums.length-1);
}

private void mergeSort(int[] nums, int start, int end) {
	if (start < end) {
		int mid = (start + end) / 2;
		mergeSort(nums, start, mid);
		mergeSort(nums, mid + 1, end);
		mergeArray(nums, start, mid, end);
	}
}

private void mergeArray(int[] nums, int start, int mid, int end) {
	int p1 = start, p2 = mid + 1, p = 0;
	int[] temp = new int[end - start + 1];
	while (p1 <= mid && p2 <= end) {
		temp[p++] = (nums[p1] > nums[p2]) ? nums[p2++] : nums[p1++];
	}
	while (p1 <= mid) temp[p++] = nums[p1++];
	while (p2 <= end) temp[p++] = nums[p2++];
	for (int i = 0, j = start; i < temp.length && j <= end; i++, j++) nums[j] = temp[i];
}